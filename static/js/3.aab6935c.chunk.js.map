{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/Contact.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","className","classes","descriptionBlock__about","classesError","formSummaryError","createField","Input","Textarea","type","descriptionBlock__contacts","Object","keys","contacts","map","key","Button","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","onClick","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","descriptionBlock__title","fullName","src","photos","large","userPhoto","descriptionBlock__imgUser","alt","descriptionBlock__changeAvaInput","event","target","files","length","initialValues","formData","then","Post","item","message","likesWrp","likesCount","MyPosts","memo","postsElements","posts","p","index","postsWrapper","AddNewPostFormRedux","values","addPost","newPostText","maxLength500","maxLengthCreator","addPostForm","Field","component","name","validate","placeholder","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.aab6935c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgBg\":\"ProfileInfo_imgBg__3C5_0\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__NhKbA\",\"descriptionBlock__title\":\"ProfileInfo_descriptionBlock__title__2DBj7\",\"descriptionBlock__imgUser\":\"ProfileInfo_descriptionBlock__imgUser__kz1TF\",\"descriptionBlock__changeAvaInput\":\"ProfileInfo_descriptionBlock__changeAvaInput__1kJmK\",\"descriptionBlock__about\":\"ProfileInfo_descriptionBlock__about__gMVyo\",\"descriptionBlock__contacts\":\"ProfileInfo_descriptionBlock__contacts__2wnhF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPostForm\":\"MyPosts_addPostForm__1yV8E\",\"postsWrapper\":\"MyPosts_postsWrapper__1JAVM\",\"posts\":\"MyPosts_posts__2L81r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__Cck8m\",\"likesWrp\":\"Post_likesWrp__9HbDl\"};","import React, { useState, useEffect } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  \r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status])\r\n\r\n  const activateMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateMode}>Status: {props.status || \"set status\"}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea,\r\n} from '../../common/FormsControls/FormsControls';\r\nimport classes from './ProfileInfo.module.scss';\r\nimport classesError from '../../common/FormsControls/FormsControls.module.scss';\r\nimport Button from '../../common/Button/Button';\r\n\r\nconst ProfileDataForm = ({ profile, handleSubmit, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className={classes.descriptionBlock__about}>\r\n        {error && <div className={classesError.formSummaryError}>{error}</div>}\r\n        <p>Full name: {createField('Full name', 'fullName', [], Input)}</p>\r\n        <p>\r\n          About me:\r\n          {createField('About me', 'aboutMe', [], Textarea)}\r\n        </p>\r\n        <p>\r\n          Looking for a job:{' '}\r\n          {createField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\r\n        </p>\r\n        <p>My professional skills: </p>\r\n        {createField(\r\n          'My professional skills',\r\n          'lookingForAJobDescription',\r\n          [],\r\n          Textarea\r\n        )}\r\n      </div>\r\n      <div className={classes.descriptionBlock__contacts}>\r\n        <h3>Find me here</h3>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key}>\r\n              <b>\r\n                {key}: {createField(key, 'contacts.' + key, [], Input)}\r\n              </b>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <Button>Save changes</Button>\r\n      {/* <button>Save changes</button> */}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(\r\n  ProfileDataForm\r\n);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React from 'react';\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return (\r\n      <div>\r\n        <p><strong>{contactTitle}: </strong>{contactValue}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Contact;","import React, { useState } from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport classes from './ProfileInfo.module.scss';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport Contact from './Contact';\r\nimport Button from '../../common/Button/Button';\r\n\r\nconst ProfileInfo = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (event) => {\r\n    if (event.target.files.length) {\r\n      savePhoto(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.descriptionBlock}>\r\n        <h3 className={classes.descriptionBlock__title}>{profile.fullName}</h3>\r\n        <div>\r\n          <div>\r\n            <img\r\n              src={profile.photos.large || userPhoto}\r\n              className={classes.descriptionBlock__imgUser}\r\n              alt='user-img'\r\n            />\r\n            {isOwner && <input className={classes.descriptionBlock__changeAvaInput} type={'file'} onChange={onMainPhotoSelected} />}\r\n          </div>\r\n\r\n          {editMode \r\n            ? <ProfileDataForm\r\n              initialValues={profile}\r\n              profile={profile}\r\n              onSubmit={onSubmit}\r\n            /> \r\n            : <ProfileData\r\n              goToEditMode={() => {\r\n                setEditMode(true);\r\n              }}\r\n              profile={profile}\r\n              isOwner={isOwner}\r\n            />\r\n          }\r\n\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <>\r\n      <div className={classes.descriptionBlock__about}>\r\n        {isOwner && <Button onClick={goToEditMode}>Edit</Button>}\r\n        <p>About me: {profile.aboutMe}</p>\r\n        {profile.lookingForAJob \r\n          ? <p>I'm looking for a job</p>\r\n          : <span>&#128526;</span>\r\n        }\r\n        <p>My professional skills: {profile.lookingForAJobDescription}</p>\r\n      </div>\r\n      <div className={classes.descriptionBlock__contacts}>\r\n        <h3>Find me here</h3>\r\n        {Object.keys(profile.contacts).map((key) => (\r\n          <Contact\r\n            key={key}\r\n            contactTitle={key}\r\n            contactValue={profile.contacts[key]}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport Button from \"../../../common/Button/Button\";\r\nimport classes from \"./Post.module.scss\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img\r\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS0yQruEZozdBpH--2cCH9jQzkgVcEplyfOGg&usqp=CAU\"\r\n        alt=\"img\"\r\n      />\r\n      {props.message}\r\n      <div className={classes.likesWrp}>\r\n        <Button>Like</Button>\r\n        {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator } from '../../../utils/validators'\r\nimport { Textarea } from '../../common/FormsControls/FormsControls'\r\nimport classes from './MyPosts.module.scss'\r\nimport Post from './Post/Post'\r\nimport Button from '../../common/Button/Button'\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  let postsElements = props.posts.map((p, index) => (\r\n    <Post message={p.message} key={index} likesCount={p.likesCount} />\r\n  ))\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.postsWrapper}>\r\n      <h3>My Posts</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      <div className={classes.posts}>{postsElements}</div>\r\n    </div>\r\n  )\r\n})\r\n\r\nconst maxLength500 = maxLengthCreator(500)\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className={classes.addPostForm}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name='newPostText'\r\n          validate={[maxLength500]}\r\n          placeholder='Post something...'\r\n        />\r\n      </div>\r\n      <div>\r\n        <Button>Add post</Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({ form: 'profileAddPostForm' })(\r\n  AddNewPostForm\r\n)\r\n\r\nexport default MyPosts\r\n","import { connect } from \"react-redux\";\r\nimport { addPostActionCreator } from \"../../../store/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText))\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    \r\n    return (\r\n        <div>\r\n            <ProfileInfo \r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile, } from '../../store/profileReducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push('/login');\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}